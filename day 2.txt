연산자
    - 단항 연산자
        - 증감 연산자 : ++, --
            ex) ++x : 참조되기 전에 연산자를 적용 (전위형 증감 연산자)
                 x++ : 참조된 후 연산자를 적용 (후위형 증감 연산자)
    - 부호연산자 : ' - '
    - 산술연산자 : ' + ' , ' - ' , ' * ' , ' / ' , ' % '
        - ' / ' 연산을 할때 주의('정수' / '정수' 경우 소숫점아래 값이 사라짐)
        - '정수' + '연산자' + '정수'의 결과값은 '정수'
          '실수' + '연산자' + '정수'의 결과값은 '실수'
          '정수' + '연산자' + '실수'의 결과값은 '실수'
          '실수' + '연산자' + '실수'의 결과값은 '실수'
        - ' % ' : 나머지 연산자(mod)
        - '정수' + '연산자' + '정수'의 경우 int형으로 변환하여 계산한다.
        - 대입연산자('=') : 우측 값을 좌측에 대입
        - 비교 연산자 : '<', '>', '<=', '>=', '==', '!='
            - 비교 연산자의 결과값은 True || False
            - 결과가 True || False 로 나오는 식을 조건식이라 한다.
            - 비교 연산자는 일반 자료형에서만 정상 동작을 한다.
        - 논리 연산자 : ' && ', ' || ', ' ! '
            x        y        x||y    x&&y
          true    true      true    true
          true    false      true   false
          false   true      true    false
          false   false      false   false
    - 비트 연산자
        - 비트 논리 연산자 : &, |, ~, ^
            - int num1 = 12 , num2 = 10;
              int num3 = num1 & num2;
              int num4 = num1 | num2;
              int num5 = num1 ^ num2;
              int num6 = ~num1;
              
              00000000 00000000 00000000 00001100 ->num1
              00000000 00000000 00000000 00001010 ->num2
              00000000 00000000 00000000 00001000 ->num3
              00000000 00000000 00000000 00001110 ->num4
              00000000 00000000 00000000 00000110 ->num5
              11111111 11111111 11111111 11110011 ->num6

        - 비트 쉬프트 연산자 : <<, >>
            - 비트를 좌측(<<) || 우측(>>)으로 이동 시킨 후 남은 자리를 좌측으로 이동시키면 0으로
              우측으로 이동시키면 부호비트로 채운다.

              10>>0 : 00001010
              10>>1 : 00000101
              10>>2 : 00000010
              10>>3 : 00000001
              10<<0 : 00001010
              10<<1 : 00010100
              10<<2 : 00101000
              10<<3 : 01010000

        - 조건 연산자(삼항 연산자)
            - 변수 = (조건식) ? True : False;
            - int num = 4;
              boolean isEven = (num%2 == 0) ? 1 : 0;
              boolean isOdd = (num%2 == 0) ? 0 : 1;
제어문
    - 조건문 : if, switch
        - if문 : 조건식이 참이면 실행문을 실행한다.
            - if (조건식1){ 
                  실행문1;
              }else if(조건식2){
                  실행문2;
              }else{
                  실행문3;
              }
              
        - switch문 : 상황에 따라 switch문으로 표현하면 if문 보다 간결하게 표현 가능
            - 사용되는 변수의 값이 제한적인 경우
            - 사용되는 식의 결과가 제한적인 경우
                switch(변수 || 식){
                    case 값1:
                        실행문1;
                        break;
                    case 값2:
                        실행문2;
                        break;
                    default:
                        실행문3;
                }
    - 반복문
        - 규칙성을 가진 작업을 반복적으로 할 때 사용
            - 규칙성 찾기
            - 반복 횟수
        - for문
            for(초기화; 조건식; 증감식){
                실행문;
            }
            - 초기화 : 조건식이나 실행문에서 사용하는 변수의 값을 초기화하는 곳으로 생략할 수 있고, 여러 변수를 통해 초기화 할 수 있다.
            - 조건식 : 반복문이 실행되기 위한 조건으로 참이면 반복문을 계속 실행, 거짓이면 반복문을 종료, 생략할 수 있으며 생략할 경우 무한루프
            - 실행문
            - 증감식 : 조건식에서 사용하는 변수를 증가 || 감소 시켜서 반복횟수를 조절하며 생락할 수 있다.
        - while문
            while(조건식){
                실행문;
            }
        - do whlie문